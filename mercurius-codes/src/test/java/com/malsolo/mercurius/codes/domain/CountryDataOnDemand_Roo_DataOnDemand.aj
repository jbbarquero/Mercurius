// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.malsolo.mercurius.codes.domain;

import com.malsolo.mercurius.codes.domain.Country;
import com.malsolo.mercurius.codes.service.CountryService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect CountryDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CountryDataOnDemand: @Component;
    
    private Random CountryDataOnDemand.rnd = new SecureRandom();
    
    private List<Country> CountryDataOnDemand.data;
    
    @Autowired
    CountryService CountryDataOnDemand.countryService;
    
    public Country CountryDataOnDemand.getNewTransientCountry(int index) {
        Country obj = new Country();
        setCcTld(obj, index);
        setCode2(obj, index);
        setCode3(obj, index);
        setName(obj, index);
        setNotes(obj, index);
        setYeariso(obj, index);
        return obj;
    }
    
    public void CountryDataOnDemand.setCcTld(Country obj, int index) {
        String ccTld = "cc_" + index;
        if (ccTld.length() > 4) {
            ccTld = ccTld.substring(0, 4);
        }
        obj.setCcTld(ccTld);
    }
    
    public void CountryDataOnDemand.setCode2(Country obj, int index) {
        String code2 = "c" + index;
        if (code2.length() > 2) {
            code2 = code2.substring(0, 2);
        }
        obj.setCode2(code2);
    }
    
    public void CountryDataOnDemand.setCode3(Country obj, int index) {
        String code3 = "c_" + index;
        if (code3.length() > 3) {
            code3 = code3.substring(0, 3);
        }
        obj.setCode3(code3);
    }
    
    public void CountryDataOnDemand.setName(Country obj, int index) {
        String name = "name_" + index;
        if (name.length() > 50) {
            name = name.substring(0, 50);
        }
        obj.setName(name);
    }
    
    public void CountryDataOnDemand.setNotes(Country obj, int index) {
        String notes = "notes_" + index;
        if (notes.length() > 100) {
            notes = notes.substring(0, 100);
        }
        obj.setNotes(notes);
    }
    
    public void CountryDataOnDemand.setYeariso(Country obj, int index) {
        int yeariso = index;
        if (yeariso > 9999) {
            yeariso = 9999;
        }
        obj.setYeariso(yeariso);
    }
    
    public Country CountryDataOnDemand.getSpecificCountry(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Country obj = data.get(index);
        java.lang.Long id = obj.getId();
        return countryService.findCountry(id);
    }
    
    public Country CountryDataOnDemand.getRandomCountry() {
        init();
        Country obj = data.get(rnd.nextInt(data.size()));
        java.lang.Long id = obj.getId();
        return countryService.findCountry(id);
    }
    
    public boolean CountryDataOnDemand.modifyCountry(Country obj) {
        return false;
    }
    
    public void CountryDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = countryService.findCountryEntries(from, to);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Country' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<com.malsolo.mercurius.codes.domain.Country>();
        for (int i = 0; i < 10; i++) {
            Country obj = getNewTransientCountry(i);
            try {
                countryService.saveCountry(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
