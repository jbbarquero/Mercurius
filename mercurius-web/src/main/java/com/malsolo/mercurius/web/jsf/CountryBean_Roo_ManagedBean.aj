// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.malsolo.mercurius.web.jsf;

import com.malsolo.mercurius.codes.domain.Country;
import com.malsolo.mercurius.codes.service.CountryService;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import javax.faces.validator.LongRangeValidator;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect CountryBean_Roo_ManagedBean {
    
    declare @type: CountryBean: @ManagedBean(name = "countryBean");
    
    declare @type: CountryBean: @SessionScoped;
    
    @Autowired
    CountryService CountryBean.countryService;
    
    private java.lang.String CountryBean.name = "Countrys";
    
    private Country CountryBean.country;
    
    private List<Country> CountryBean.allCountrys;
    
    private boolean CountryBean.dataVisible = false;
    
    private List<java.lang.String> CountryBean.columns;
    
    private HtmlPanelGrid CountryBean.createPanelGrid;
    
    private HtmlPanelGrid CountryBean.editPanelGrid;
    
    private HtmlPanelGrid CountryBean.viewPanelGrid;
    
    private boolean CountryBean.createDialogVisible = false;
    
    @PostConstruct
    public void CountryBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("code2");
        columns.add("code3");
        columns.add("yeariso");
        columns.add("ccTld");
        columns.add("notes");
    }
    
    public java.lang.String CountryBean.getName() {
        return name;
    }
    
    public List<java.lang.String> CountryBean.getColumns() {
        return columns;
    }
    
    public List<Country> CountryBean.getAllCountrys() {
        return allCountrys;
    }
    
    public void CountryBean.setAllCountrys(List<Country> allCountrys) {
        this.allCountrys = allCountrys;
    }
    
    public java.lang.String CountryBean.findAllCountrys() {
        allCountrys = countryService.findAllCountrys();
        dataVisible = !allCountrys.isEmpty();
        return null;
    }
    
    public boolean CountryBean.isDataVisible() {
        return dataVisible;
    }
    
    public void CountryBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid CountryBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void CountryBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid CountryBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void CountryBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid CountryBean.getViewPanelGrid() {
        if (viewPanelGrid == null) {
            viewPanelGrid = populateViewPanel();
        }
        return viewPanelGrid;
    }
    
    public void CountryBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid CountryBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name: * ");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputTextarea nameCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameCreateInput.setMaxHeight(100);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{countryBean.country.name}", String.class));
        LengthValidator nameCreateInputValidator = new LengthValidator();
        nameCreateInputValidator.setMaximum(50);
        nameCreateInput.addValidator(nameCreateInputValidator);
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        HtmlOutputText code2CreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        code2CreateOutput.setId("code2CreateOutput");
        code2CreateOutput.setValue("Code2: * ");
        htmlPanelGrid.getChildren().add(code2CreateOutput);
        
        InputText code2CreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        code2CreateInput.setId("code2CreateInput");
        code2CreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{countryBean.country.code2}", String.class));
        LengthValidator code2CreateInputValidator = new LengthValidator();
        code2CreateInputValidator.setMaximum(2);
        code2CreateInput.addValidator(code2CreateInputValidator);
        code2CreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(code2CreateInput);
        
        Message code2CreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        code2CreateInputMessage.setId("code2CreateInputMessage");
        code2CreateInputMessage.setFor("code2CreateInput");
        code2CreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(code2CreateInputMessage);
        
        HtmlOutputText code3CreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        code3CreateOutput.setId("code3CreateOutput");
        code3CreateOutput.setValue("Code3: * ");
        htmlPanelGrid.getChildren().add(code3CreateOutput);
        
        InputText code3CreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        code3CreateInput.setId("code3CreateInput");
        code3CreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{countryBean.country.code3}", String.class));
        LengthValidator code3CreateInputValidator = new LengthValidator();
        code3CreateInputValidator.setMaximum(3);
        code3CreateInput.addValidator(code3CreateInputValidator);
        code3CreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(code3CreateInput);
        
        Message code3CreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        code3CreateInputMessage.setId("code3CreateInputMessage");
        code3CreateInputMessage.setFor("code3CreateInput");
        code3CreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(code3CreateInputMessage);
        
        HtmlOutputText yearisoCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        yearisoCreateOutput.setId("yearisoCreateOutput");
        yearisoCreateOutput.setValue("Yeariso: * ");
        htmlPanelGrid.getChildren().add(yearisoCreateOutput);
        
        Spinner yearisoCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        yearisoCreateInput.setId("yearisoCreateInput");
        yearisoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{countryBean.country.yeariso}", Integer.class));
        yearisoCreateInput.setRequired(true);
        yearisoCreateInput.setMax(9999.0);
        LongRangeValidator yearisoCreateInputValidator = new LongRangeValidator();
        yearisoCreateInputValidator.setMaximum(9999);
        yearisoCreateInput.addValidator(yearisoCreateInputValidator);
        
        htmlPanelGrid.getChildren().add(yearisoCreateInput);
        
        Message yearisoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        yearisoCreateInputMessage.setId("yearisoCreateInputMessage");
        yearisoCreateInputMessage.setFor("yearisoCreateInput");
        yearisoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(yearisoCreateInputMessage);
        
        HtmlOutputText ccTldCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        ccTldCreateOutput.setId("ccTldCreateOutput");
        ccTldCreateOutput.setValue("Cc Tld: * ");
        htmlPanelGrid.getChildren().add(ccTldCreateOutput);
        
        InputText ccTldCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        ccTldCreateInput.setId("ccTldCreateInput");
        ccTldCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{countryBean.country.ccTld}", String.class));
        LengthValidator ccTldCreateInputValidator = new LengthValidator();
        ccTldCreateInputValidator.setMaximum(4);
        ccTldCreateInput.addValidator(ccTldCreateInputValidator);
        ccTldCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(ccTldCreateInput);
        
        Message ccTldCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        ccTldCreateInputMessage.setId("ccTldCreateInputMessage");
        ccTldCreateInputMessage.setFor("ccTldCreateInput");
        ccTldCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(ccTldCreateInputMessage);
        
        HtmlOutputText notesCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        notesCreateOutput.setId("notesCreateOutput");
        notesCreateOutput.setValue("Notes: * ");
        htmlPanelGrid.getChildren().add(notesCreateOutput);
        
        InputTextarea notesCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        notesCreateInput.setMaxHeight(100);
        notesCreateInput.setId("notesCreateInput");
        notesCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{countryBean.country.notes}", String.class));
        LengthValidator notesCreateInputValidator = new LengthValidator();
        notesCreateInputValidator.setMaximum(100);
        notesCreateInput.addValidator(notesCreateInputValidator);
        notesCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(notesCreateInput);
        
        Message notesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        notesCreateInputMessage.setId("notesCreateInputMessage");
        notesCreateInputMessage.setFor("notesCreateInput");
        notesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(notesCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid CountryBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name: * ");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputTextarea nameEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameEditInput.setMaxHeight(100);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{countryBean.country.name}", String.class));
        LengthValidator nameEditInputValidator = new LengthValidator();
        nameEditInputValidator.setMaximum(50);
        nameEditInput.addValidator(nameEditInputValidator);
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        HtmlOutputText code2EditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        code2EditOutput.setId("code2EditOutput");
        code2EditOutput.setValue("Code2: * ");
        htmlPanelGrid.getChildren().add(code2EditOutput);
        
        InputText code2EditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        code2EditInput.setId("code2EditInput");
        code2EditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{countryBean.country.code2}", String.class));
        LengthValidator code2EditInputValidator = new LengthValidator();
        code2EditInputValidator.setMaximum(2);
        code2EditInput.addValidator(code2EditInputValidator);
        code2EditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(code2EditInput);
        
        Message code2EditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        code2EditInputMessage.setId("code2EditInputMessage");
        code2EditInputMessage.setFor("code2EditInput");
        code2EditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(code2EditInputMessage);
        
        HtmlOutputText code3EditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        code3EditOutput.setId("code3EditOutput");
        code3EditOutput.setValue("Code3: * ");
        htmlPanelGrid.getChildren().add(code3EditOutput);
        
        InputText code3EditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        code3EditInput.setId("code3EditInput");
        code3EditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{countryBean.country.code3}", String.class));
        LengthValidator code3EditInputValidator = new LengthValidator();
        code3EditInputValidator.setMaximum(3);
        code3EditInput.addValidator(code3EditInputValidator);
        code3EditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(code3EditInput);
        
        Message code3EditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        code3EditInputMessage.setId("code3EditInputMessage");
        code3EditInputMessage.setFor("code3EditInput");
        code3EditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(code3EditInputMessage);
        
        HtmlOutputText yearisoEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        yearisoEditOutput.setId("yearisoEditOutput");
        yearisoEditOutput.setValue("Yeariso: * ");
        htmlPanelGrid.getChildren().add(yearisoEditOutput);
        
        Spinner yearisoEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        yearisoEditInput.setId("yearisoEditInput");
        yearisoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{countryBean.country.yeariso}", Integer.class));
        yearisoEditInput.setRequired(true);
        yearisoEditInput.setMax(9999.0);
        LongRangeValidator yearisoEditInputValidator = new LongRangeValidator();
        yearisoEditInputValidator.setMaximum(9999);
        yearisoEditInput.addValidator(yearisoEditInputValidator);
        
        htmlPanelGrid.getChildren().add(yearisoEditInput);
        
        Message yearisoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        yearisoEditInputMessage.setId("yearisoEditInputMessage");
        yearisoEditInputMessage.setFor("yearisoEditInput");
        yearisoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(yearisoEditInputMessage);
        
        HtmlOutputText ccTldEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        ccTldEditOutput.setId("ccTldEditOutput");
        ccTldEditOutput.setValue("Cc Tld: * ");
        htmlPanelGrid.getChildren().add(ccTldEditOutput);
        
        InputText ccTldEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        ccTldEditInput.setId("ccTldEditInput");
        ccTldEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{countryBean.country.ccTld}", String.class));
        LengthValidator ccTldEditInputValidator = new LengthValidator();
        ccTldEditInputValidator.setMaximum(4);
        ccTldEditInput.addValidator(ccTldEditInputValidator);
        ccTldEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(ccTldEditInput);
        
        Message ccTldEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        ccTldEditInputMessage.setId("ccTldEditInputMessage");
        ccTldEditInputMessage.setFor("ccTldEditInput");
        ccTldEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(ccTldEditInputMessage);
        
        HtmlOutputText notesEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        notesEditOutput.setId("notesEditOutput");
        notesEditOutput.setValue("Notes: * ");
        htmlPanelGrid.getChildren().add(notesEditOutput);
        
        InputTextarea notesEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        notesEditInput.setMaxHeight(100);
        notesEditInput.setId("notesEditInput");
        notesEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{countryBean.country.notes}", String.class));
        LengthValidator notesEditInputValidator = new LengthValidator();
        notesEditInputValidator.setMaximum(100);
        notesEditInput.addValidator(notesEditInputValidator);
        notesEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(notesEditInput);
        
        Message notesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        notesEditInputMessage.setId("notesEditInputMessage");
        notesEditInputMessage.setFor("notesEditInput");
        notesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(notesEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid CountryBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:   ");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        InputTextarea nameValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nameValue.setMaxHeight(100);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{countryBean.country.name}", String.class));
        nameValue.setReadonly(true);
        nameValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText code2Label = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        code2Label.setId("code2Label");
        code2Label.setValue("Code2:   ");
        htmlPanelGrid.getChildren().add(code2Label);
        
        HtmlOutputText code2Value = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        code2Value.setId("code2Value");
        code2Value.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{countryBean.country.code2}", String.class));
        htmlPanelGrid.getChildren().add(code2Value);
        
        HtmlOutputText code3Label = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        code3Label.setId("code3Label");
        code3Label.setValue("Code3:   ");
        htmlPanelGrid.getChildren().add(code3Label);
        
        HtmlOutputText code3Value = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        code3Value.setId("code3Value");
        code3Value.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{countryBean.country.code3}", String.class));
        htmlPanelGrid.getChildren().add(code3Value);
        
        HtmlOutputText yearisoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        yearisoLabel.setId("yearisoLabel");
        yearisoLabel.setValue("Yeariso:   ");
        htmlPanelGrid.getChildren().add(yearisoLabel);
        
        HtmlOutputText yearisoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        yearisoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{countryBean.country.yeariso}", String.class));
        htmlPanelGrid.getChildren().add(yearisoValue);
        
        HtmlOutputText ccTldLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        ccTldLabel.setId("ccTldLabel");
        ccTldLabel.setValue("Cc Tld:   ");
        htmlPanelGrid.getChildren().add(ccTldLabel);
        
        HtmlOutputText ccTldValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        ccTldValue.setId("ccTldValue");
        ccTldValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{countryBean.country.ccTld}", String.class));
        htmlPanelGrid.getChildren().add(ccTldValue);
        
        HtmlOutputText notesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        notesLabel.setId("notesLabel");
        notesLabel.setValue("Notes:   ");
        htmlPanelGrid.getChildren().add(notesLabel);
        
        InputTextarea notesValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        notesValue.setMaxHeight(100);
        notesValue.setId("notesValue");
        notesValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{countryBean.country.notes}", String.class));
        notesValue.setReadonly(true);
        notesValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(notesValue);
        
        return htmlPanelGrid;
    }
    
    public Country CountryBean.getCountry() {
        if (country == null) {
            country = new Country();
        }
        return country;
    }
    
    public void CountryBean.setCountry(Country country) {
        this.country = country;
    }
    
    public java.lang.String CountryBean.onEdit() {
        return null;
    }
    
    public boolean CountryBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void CountryBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public java.lang.String CountryBean.displayList() {
        createDialogVisible = false;
        findAllCountrys();
        return "country";
    }
    
    public java.lang.String CountryBean.displayCreateDialog() {
        country = new Country();
        createDialogVisible = true;
        return "country";
    }
    
    public java.lang.String CountryBean.persist() {
        String message = "";
        if (country.getId() != null) {
            countryService.updateCountry(country);
            message = "Successfully updated";
        } else {
            countryService.saveCountry(country);
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllCountrys();
    }
    
    public java.lang.String CountryBean.delete() {
        countryService.deleteCountry(country);
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllCountrys();
    }
    
    public void CountryBean.reset() {
        country = null;
        createDialogVisible = false;
    }
    
    public void CountryBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
